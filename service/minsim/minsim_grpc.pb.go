// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: service/minsim/minsim.proto

package minsim

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MinsimClient is the client API for Minsim service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MinsimClient interface {
	NewMinsim(ctx context.Context, in *NewMinsimRequest, opts ...grpc.CallOption) (*NewMinsimResponse, error)
}

type minsimClient struct {
	cc grpc.ClientConnInterface
}

func NewMinsimClient(cc grpc.ClientConnInterface) MinsimClient {
	return &minsimClient{cc}
}

func (c *minsimClient) NewMinsim(ctx context.Context, in *NewMinsimRequest, opts ...grpc.CallOption) (*NewMinsimResponse, error) {
	out := new(NewMinsimResponse)
	err := c.cc.Invoke(ctx, "/service.minsim.Minsim/NewMinsim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MinsimServer is the server API for Minsim service.
// All implementations must embed UnimplementedMinsimServer
// for forward compatibility
type MinsimServer interface {
	NewMinsim(context.Context, *NewMinsimRequest) (*NewMinsimResponse, error)
	mustEmbedUnimplementedMinsimServer()
}

// UnimplementedMinsimServer must be embedded to have forward compatible implementations.
type UnimplementedMinsimServer struct {
}

func (UnimplementedMinsimServer) NewMinsim(context.Context, *NewMinsimRequest) (*NewMinsimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewMinsim not implemented")
}
func (UnimplementedMinsimServer) mustEmbedUnimplementedMinsimServer() {}

// UnsafeMinsimServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MinsimServer will
// result in compilation errors.
type UnsafeMinsimServer interface {
	mustEmbedUnimplementedMinsimServer()
}

func RegisterMinsimServer(s grpc.ServiceRegistrar, srv MinsimServer) {
	s.RegisterService(&Minsim_ServiceDesc, srv)
}

func _Minsim_NewMinsim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewMinsimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinsimServer).NewMinsim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.minsim.Minsim/NewMinsim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinsimServer).NewMinsim(ctx, req.(*NewMinsimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Minsim_ServiceDesc is the grpc.ServiceDesc for Minsim service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Minsim_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.minsim.Minsim",
	HandlerType: (*MinsimServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewMinsim",
			Handler:    _Minsim_NewMinsim_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/minsim/minsim.proto",
}
